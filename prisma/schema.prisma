// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Custom enum for your application, lives in 'public' schema
enum Role {
  MANAGER
  TEAM_MEMBER
}

// User model: CRITICAL - This maps to Supabase's auth.users table
model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String? // Make nullable for OAuth users, if you plan to add them later
  image         String?
  role          Role      @default(TEAM_MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Inventory     Inventory[]
}

// NextAuth related tables, typically in the 'public' schema
model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid // <--- ADD @db.Uuid HERE
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth related tables, typically in the 'public' schema
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid // <--- ADD @db.Uuid HERE
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NextAuth related tables, typically in the 'public' schema
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// NextAuth related tables, typically in the 'public' schema
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid // <--- ADD @db.Uuid HERE
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Your custom application tables, typically in the 'public' schema
model Item {
  id                      String          @id @default(uuid())
  user_id                 String          @db.Uuid // <--- ADD @db.Uuid HERE
  name                    String
  upc_number              String?
  average_weight_per_unit Float?
  unit_type               String // Consider making this an enum (e.g., `enum UnitType { QUANTITY, WEIGHT } @@schema("public")`)
  item_type               String?
  brand                   String?
  created_at              DateTime        @default(now())
  inventoryItems          InventoryItem[]
}

// Your custom application tables, typically in the 'public' schema
model Inventory {
  id         String          @id @default(uuid())
  name       String
  status     String // Consider making this an enum (e.g., `enum InventoryStatus { DRAFT, COMPLETED, DELETED } @@schema("public")`)
  settings   Json?
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  items      InventoryItem[]

  // Define the relation to the User model (which maps to auth.users)
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.Uuid
}

// Your custom application tables, typically in the 'public' schema
model InventoryItem {
  id                String   @id @default(uuid())
  inventory_id      String
  item_id           String
  counted_units     Float
  calculated_weight Float?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  inventory Inventory @relation(fields: [inventory_id], references: [id])
  item      Item      @relation(fields: [item_id], references: [id])
}
